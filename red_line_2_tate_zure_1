import sensor, image, time, pyb

sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QVGA)
sensor.skip_frames(time=2000)
clock = time.clock()

uart = pyb.UART(1, 115200, timeout=1000)
uart.init(115200, bits=8, parity=None, stop=1)

red_threshold = (20, 250, 40, 170, 5, 150)  # 赤色の閾値設定
#red_threshold = (80,100, -3,3, -3,3)
#red_threshold = (100,15,15)
#red_threshold = (53, 80, 57)
angle_range = [(0,170) ]  # 検出する角度範囲
center_x = sensor.width() // 2

def find_lines_within_angle_range(lines, angle_range):
    lines_within_range = []
    for line in lines:
        theta = line.theta()
        for range_start, range_end in angle_range:
            if range_start <= theta <= range_end:
                lines_within_range.append(line)
                break
    lines_within_range.sort(key=lambda line: line.length(), reverse=True)
    return lines_within_range[:2]

while True:
    img = sensor.snapshot()
    clock.tick()
    binary_image = img.binary([red_threshold])
    lines = binary_image.find_lines(
        threshold=5500,
        theta_margin=5,
        rho_margin=5 ,
        merge_distance=5,
        max_theta_diff = 5
        )

    lines_within_range = find_lines_within_angle_range(lines, angle_range)

    if len(lines_within_range) >= 2:
        line1 = lines_within_range[0]
        line2 = lines_within_range[1]

        #if line1.rho() < line2.rho():

        line1_center_x = (line1.x1() + line1.x2()) // 2
        #line1_center_y = (line1.y1() + line1.y2()) // 2
        line2_center_x = (line2.x1() + line2.x2()) // 2
        #line2_center_y = (line2.y1() + line2.y2()) // 2

        midpoint_x = (line1_center_x + line2_center_x) // 2
        #midpoint_y = (line1_center_y + line2_center_y) // 2

        deviation_x = midpoint_x - center_x

        img.draw_line(line1.line(), color=( 255,0, 0))
        img.draw_line(line2.line(), color=( 0, 255, 0))

        #print( clock.fps())
        print("中心からのずれ: {}".format(deviation_x))
        #print("角度:" , line1.theta())
        #print("角度:" , line2.theta())
        #print("line1:", line1.rho())
        #print("line2:", line1.rho())

        #print("x1:", line1.x1())
        #print("x2:", line1.x2())
        #print("y1:", line1.y1())
        #print("y2:", line1.y2())

        uart.write(str(deviation_x).encode() +b'\n')
